<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>setup on F* in Practice</title>
    <link>/fstar-in-practice/tags/setup/</link>
    <description>F* in Practice (setup)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>2020-08-22</lastBuildDate>
    
    <atom:link href="/fstar-in-practice/tags/setup/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Setting up an F* development environment</title>
      <link>/fstar-in-practice/posts/setting-up-an-fstar-development-environment/</link>
      <pubDate>2020-08-22</pubDate>
      
      <guid>/fstar-in-practice/posts/setting-up-an-fstar-development-environment/</guid>
      <description>&lt;p&gt;There are several ways of setting up a development environment for F*.
The approach I prefer is to build F* itself from source, but use the version of &lt;code&gt;opam&lt;/code&gt; provided by the system package manager, and to use the F* mode for Emacs to edit F* files.&lt;/p&gt;

&lt;p&gt;This post details how to set up this, from a newly installed Linux system to extracting, building, and executing F* code.
We will mostly follow &lt;a href=&#34;https://github.com/FStarLang/FStar/blob/master/INSTALL.md#building-f-from-the-ocaml-sources&#34;&gt;the official F* installation instructions&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Examples from this post can be found &lt;a href=&#34;./examples/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&#34;ox-hugo-toc toc&#34;&gt;
&lt;div&gt;&lt;/div&gt;

&lt;div class=&#34;heading&#34;&gt;Table of Contents&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#necessary-priviliges&#34;&gt;Necessary priviliges&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#installing-f-and-ocaml&#34;&gt;Installing F* and OCaml&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#installing-opam&#34;&gt;Installing &lt;code&gt;opam&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#installing-f-dependencies&#34;&gt;Installing F* dependencies&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#ocaml-dependencies&#34;&gt;OCaml dependencies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#the-z3-smt-solver&#34;&gt;The Z3 SMT solver&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#building-f&#34;&gt;Building F*&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#getting-the-source-code&#34;&gt;Getting the source code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#tweaking-the-f-source-code&#34;&gt;Tweaking the F* source code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#building&#34;&gt;Building&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#installing&#34;&gt;Installing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#typechecking-two-simple-examples&#34;&gt;Typechecking two simple examples&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#getting-rid-of-warnings&#34;&gt;Getting rid of warnings&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#manual-method&#34;&gt;Manual method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#automated-method&#34;&gt;Automated method&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#setting-up-emacs-for-f-development&#34;&gt;Setting up Emacs for F* development&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#setting-up-a-makefile-and-running-some-code&#34;&gt;Setting up a Makefile and running some code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#references&#34;&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/div&gt;
&lt;!--endtoc--&gt;&lt;/p&gt;

&lt;h2 id=&#34;necessary-priviliges&#34;&gt;Necessary priviliges&lt;/h2&gt;

&lt;p&gt;Root access is required only for the steps which involve the system package manager:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Installing &lt;code&gt;opam&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Installing &lt;code&gt;gmp-devel&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Installing Z3&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The official F* documentation suggests using a precompiled Z3 binary, in which case root access is not required for that step.&lt;/p&gt;

&lt;h2 id=&#34;installing-f-and-ocaml&#34;&gt;Installing F* and OCaml&lt;/h2&gt;

&lt;h3 id=&#34;installing-opam&#34;&gt;Installing &lt;code&gt;opam&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Many Linux and BSD distributions have &lt;code&gt;opam&lt;/code&gt; available in their package repositories.
On a Fedora system, for instance, &lt;code&gt;opam&lt;/code&gt; may be installed as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ sudo dnf install opam&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When &lt;code&gt;opam&lt;/code&gt; is installed, it can be used to install the rest of the OCaml environment by running &lt;code&gt;opam init&lt;/code&gt;.
The configuration process will suggest adding a line to &lt;code&gt;~/.bash_profile&lt;/code&gt; to initialize environments variables, and a hook to the &lt;code&gt;opam&lt;/code&gt; init scripts.
This is not strictly necessary, but it is helpful.
The alternative is to run &lt;code&gt;eval $(opam env)&lt;/code&gt; manually to set up these environment variables when needed.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ opam init
[NOTE] Will configure from built-in defaults.
Checking for available remotes: rsync and local, git.
  - you won&amp;#39;t be able to use mercurial repositories unless you install the hg command on your system.
  - you won&amp;#39;t be able to use darcs repositories unless you install the darcs command on your system.


&amp;lt;&amp;gt;&amp;lt;&amp;gt; Fetching repository information &amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;
[default] Initialised

&amp;lt;&amp;gt;&amp;lt;&amp;gt; Required setup - please read &amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;

  In normal operation, opam only alters files within ~/.opam.

  However, to best integrate with your system, some environment variables
  should be set. If you allow it to, this initialisation step will update
  your bash configuration by adding the following line to ~/.bash_profile:

    test -r ~/.opam/opam-init/init.sh &amp;amp;&amp;amp; . ~/.opam/opam-init/init.sh &amp;gt; /dev/null 2&amp;gt; /dev/null || true

  Otherwise, every time you want to access your opam installation, you will
  need to run:

    eval $(opam env)

  You can always re-run this setup with &amp;#39;opam init&amp;#39; later.

Do you want opam to modify ~/.bash_profile? [N/y/f]
(default is &amp;#39;no&amp;#39;, use &amp;#39;f&amp;#39; to choose a different file)
A hook can be added to opam&amp;#39;s init scripts to ensure that the shell remains in sync with the opam environment when they are loaded. Set that up? [y/N] n

&amp;lt;&amp;gt;&amp;lt;&amp;gt; Creating initial switch (ocaml-base-compiler) &amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;

&amp;lt;&amp;gt;&amp;lt;&amp;gt; Gathering sources &amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;
[ocaml-base-compiler.4.11.0] downloaded from cache at https://opam.ocaml.org/cache

&amp;lt;&amp;gt;&amp;lt;&amp;gt; Processing actions &amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;
∗ installed base-bigarray.base
∗ installed base-threads.base
∗ installed base-unix.base
∗ installed ocaml-base-compiler.4.11.0
∗ installed ocaml-config.1
∗ installed ocaml.4.11.0
Done.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Since we need to interact with &lt;code&gt;opam&lt;/code&gt; directly for a little while longer, we will set up the environment variables in the current shell:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ eval (opam env)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The following is what was set up by running &lt;code&gt;eval $(opam env)&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ opam env
&lt;span style=&#34;color:#00688b&#34;&gt;OPAM_SWITCH_PREFIX&lt;/span&gt;=&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;~/.opam/default&amp;#39;&lt;/span&gt;; &lt;span style=&#34;color:#658b00&#34;&gt;export&lt;/span&gt; OPAM_SWITCH_PREFIX;
&lt;span style=&#34;color:#00688b&#34;&gt;CAML_LD_LIBRARY_PATH&lt;/span&gt;=&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;~/.opam/default/lib/stublibs:Updated by package ocaml&amp;#39;&lt;/span&gt;; &lt;span style=&#34;color:#658b00&#34;&gt;export&lt;/span&gt; CAML_LD_LIBRARY_PATH;
&lt;span style=&#34;color:#00688b&#34;&gt;OCAML_TOPLEVEL_PATH&lt;/span&gt;=&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;~/.opam/default/lib/toplevel&amp;#39;&lt;/span&gt;; &lt;span style=&#34;color:#658b00&#34;&gt;export&lt;/span&gt; OCAML_TOPLEVEL_PATH;
&lt;span style=&#34;color:#00688b&#34;&gt;MANPATH&lt;/span&gt;=&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;::~/.opam/default/man&amp;#39;&lt;/span&gt;; &lt;span style=&#34;color:#658b00&#34;&gt;export&lt;/span&gt; MANPATH;
&lt;span style=&#34;color:#00688b&#34;&gt;PATH&lt;/span&gt;=&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;~/.opam/default/bin:~/.local/bin:~/bin:/usr/share/Modules/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin&amp;#39;&lt;/span&gt;; &lt;span style=&#34;color:#658b00&#34;&gt;export&lt;/span&gt; PATH;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can now use &lt;code&gt;opam switch&lt;/code&gt; to see which version of the OCaml compiler was installed.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ opam switch
#  switch   compiler                    description
→  default  ocaml-base-compiler.4.11.0  default&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Unfortunately, F* does not currently support this version of OCaml, so we need to downgrade to version &lt;code&gt;4.09.1&lt;/code&gt; using &lt;code&gt;opam switch create 4.09.1&lt;/code&gt;.
Supported OCaml versions can be found in &lt;a href=&#34;https://github.com/FStarLang/FStar/blob/master/INSTALL.md#prerequisites-working-ocaml-setup&#34;&gt;the official F* installation instructions&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ opam switch create 4.09.1
[...]

$ eval $(opam env)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;installing-f-dependencies&#34;&gt;Installing F* dependencies&lt;/h3&gt;

&lt;h4 id=&#34;ocaml-dependencies&#34;&gt;OCaml dependencies&lt;/h4&gt;

&lt;p&gt;The dependencies for building F* can be installed with &lt;code&gt;opam install ocamlbuild ocamlfind batteries stdint zarith yojson fileutils pprint  menhir ulex ppx_deriving ppx_deriving_yojson process ocaml-migrate-parsetree&lt;/code&gt;.
The installation might fail due to missing system dependencies.
Install the necessary system packages (&lt;code&gt;opam install depext&lt;/code&gt; and &lt;code&gt;opam depext -i conf-gmp&lt;/code&gt; can be helpful to identify and install the packages) and retry:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ opam install ocamlbuild ocamlfind batteries stdint zarith yojson fileutils pprint menhir ulex ppx_deriving ppx_deriving_yojson process ocaml-migrate-parsetree
&amp;lt;&amp;gt;&amp;lt;&amp;gt; Error report &amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;&amp;lt;&amp;gt;
┌─ The following actions failed
│ λ build conf-gmp 1
└─

[...]

The packages you requested declare the following system dependencies. Please make sure they are installed before retrying:
    gmp gmp-devel

$ sudo dnf install gmp-devel
$ opam install ocamlbuild ocamlfind batteries stdint zarith yojson fileutils pprint menhir ulex ppx_deriving ppx_deriving_yojson process ocaml-migrate-parsetree&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;the-z3-smt-solver&#34;&gt;The Z3 SMT solver&lt;/h4&gt;

&lt;p&gt;F* uses the Z3 SMT solver as part of type-checking.
The official recommendation is to use &lt;a href=&#34;https://github.com/FStarLang/binaries/tree/master/z3-tested&#34;&gt;the precompiled Z3 binary from the F* project&lt;/a&gt;, but installing it from the system package repository also seems to work.
In principle, we could build F* first, and install Z3 later, but it will be beneficial to know which version of Z3 we will be using to avoid some warning messages.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ sudo dnf install z3&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;building-f&#34;&gt;Building F*&lt;/h3&gt;

&lt;h4 id=&#34;getting-the-source-code&#34;&gt;Getting the source code&lt;/h4&gt;

&lt;p&gt;The source code for the F* project can be obtained from GitHub:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ git clone https://github.com/FStarLang/FStar.git
$ cd FStar&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;tweaking-the-f-source-code&#34;&gt;Tweaking the F* source code&lt;/h4&gt;

&lt;p&gt;The file &lt;code&gt;src/smtencoding/FStar.SMTEncoding.Z3.fs&lt;/code&gt; in the FStar repository is responsible for printing a warning when using a different Z3 version than the expected one. It contains the line &lt;code&gt;let _z3version_expected = &amp;quot;Z3 version 4.8.5&amp;quot;&lt;/code&gt;, which we want to change to match our Z3 version:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ z3 -version
Z3 version 4.8.7 - 64 bit - build hashcode 30e7c225cd51&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We see that we are using &lt;code&gt;Z3 version 4.8.7&lt;/code&gt;, so we will update the line in &lt;code&gt;src/smtencoding/FStar.SMTEncoding.Z3.fs&lt;/code&gt; accordingly:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;let&lt;/span&gt; _z3version_expected = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Z3 version 4.8.7&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;building&#34;&gt;Building&lt;/h4&gt;

&lt;p&gt;We are now ready to build F*. In the FStar repository, run &lt;code&gt;make 1 -j6&lt;/code&gt;. Note that you need to have run &lt;code&gt;eval $(opam env)&lt;/code&gt; in the current shell, or otherwise have the OCaml environment variables correctly set up for &lt;code&gt;make&lt;/code&gt; to run correctly.
The resulting binary is &lt;code&gt;bin/fstar.exe&lt;/code&gt;. You can run &lt;code&gt;file bin/fstar.exe&lt;/code&gt; to see that it is indeed a Linux binary, even though the file extension seems to indicate a Windows binary.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ make 1 -j6
$ ls bin/
fstar-any.sh  fstar-compiler-lib  fstar.exe  fstar.ocaml  tests.exe  tests-mono.sh&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We also need to build the OCaml library &lt;code&gt;fstarlib&lt;/code&gt;, which our executables will be built against. This can be done by running &lt;code&gt;make libs -j6&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ make libs -j6
$ ls bin/
fstar-any.sh  fstar-compiler-lib  fstar.exe  fstarlib  fstar.ocaml  fstar-tactics-lib  tests.exe  tests-mono.sh&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;installing&#34;&gt;Installing&lt;/h4&gt;

&lt;p&gt;We can now copy the necessary files to a more convenient location to avoid running F* from the Git repository.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ mkdir -p ~/opt/fstar/bin
$ cp -i bin/fstar.exe ~/opt/fstar/bin
$ cp -ir bin/fstarlib ~/opt/fstar/bin
$ cp -ir ulib/ ~/opt/fstar&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;typechecking-two-simple-examples&#34;&gt;Typechecking two simple examples&lt;/h2&gt;

&lt;p&gt;We will now verify that we have set everything up correctly by typechecking a valid example and an invalid example. The reason for trying an invalid example is that there are some problems, for instance F* not finding the Z3 executable, which make verification fail with warnings but without obvious errors.
Enter the following into a &lt;a href=&#34;./examples/Example.Valid.fst&#34;&gt;file named &lt;code&gt;Example.Valid.fst&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;module&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;Example&lt;/span&gt;.&lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Valid&lt;/span&gt;

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; fibonacci: n:&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;{n &amp;gt;= 0} -&amp;gt; m:&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;{m &amp;gt; 0}
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;rec&lt;/span&gt; fibonacci n = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; n &amp;lt;= 1 &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;then&lt;/span&gt; 1 &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; (fibonacci (n - 1)) + (fibonacci (n-2))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Type check the file by running &lt;code&gt;~/opt/fstar/bin/fstar.exe Example.Valid.fst&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ ~/opt/fstar/bin/fstar.exe Example.Valid.fst
~/opt/fstar/ulib/prims.fst(0,0-0,0): (Warning 241) Unable to load ~/opt/fstar/ulib/prims.fst.checked since checked file ~/opt/fstar/ulib/prims.fst.checked does not exist; will recheck ~/opt/fstar/ulib/prims.fst (suppressing this warning for further modules)
Verified module: Example.Valid
All verification conditions discharged successfully&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We will address the warning soon. For now, note that the file type-checked correctly, as seen by the output &lt;code&gt;All verification conditions discharged successfully&lt;/code&gt;. However, note that the warning implies that F* did find the Z3 executable correctly.&lt;/p&gt;

&lt;p&gt;Create a &lt;a href=&#34;./examples/Example.Invalid.fst&#34;&gt;file called &lt;code&gt;Example.Invalid.fst&lt;/code&gt;&lt;/a&gt; with the following contents.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;module&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;Example&lt;/span&gt;.&lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Invalid&lt;/span&gt;

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;val&lt;/span&gt; fibonacci: n:&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;{n &amp;gt;= 0} -&amp;gt; m:&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;{m &amp;gt; n}
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;rec&lt;/span&gt; fibonacci n = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; n &amp;lt;= 1 &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;then&lt;/span&gt; 1 &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; (fibonacci (n - 1)) + (fibonacci (n-2))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The difference here is that the type signature of &lt;code&gt;fibonacci&lt;/code&gt; claims that the output of the function is always greater than the input which is not true since &lt;code&gt;fibonacci 1&lt;/code&gt; is equal to &lt;code&gt;1&lt;/code&gt;.
Hence we expect the verification of this file to fail.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ ~/opt/fstar/bin/fstar.exe Example.Invalid.fst
~/opt/fstar/ulib/prims.fst(0,0-0,0): (Warning 241) Unable to load ~/opt/fstar/ulib/prims.fst.checked since checked file ~/opt/fstar/ulib/prims.fst.checked does not exist; will recheck ~/opt/fstar/ulib/prims.fst (suppressing this warning for further modules)
Example.Invalid.fst(4,37-4,38): (Error 19) Subtyping check failed; expected type m: Prims.int{m &amp;gt; n}; got type Prims.int; The solver found a (partial) counterexample, try to spell your proof in more detail or increase fuel/ifuel (see also Example.Invalid.fst(3,38-3,43))
Verified module: Example.Invalid
1 error was reported (see above)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As expected, F* fails to prove that &lt;code&gt;m&lt;/code&gt; has type &lt;code&gt;int{m &amp;gt; n}&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;getting-rid-of-warnings&#34;&gt;Getting rid of warnings&lt;/h3&gt;

&lt;h4 id=&#34;manual-method&#34;&gt;Manual method&lt;/h4&gt;

&lt;p&gt;When verifying code above, we got warnings of the following form:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;~/opt/fstar/ulib/prims.fst(0,0-0,0): (Warning 241) Unable to load ~/opt/fstar/ulib/prims.fst.checked since checked file ~/opt/fstar/ulib/prims.fst.checked does not exist; will recheck ~/opt/fstar/ulib/prims.fst (suppressing this warning for further modules)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This means that F* did not find cached verification results for &lt;code&gt;prims.fst&lt;/code&gt; and will recheck it, which is unnecessary work and causes these annoying warnings. We can check the file and cache the result by running &lt;code&gt;fstar.exe --cache_checked_modules ~/opt/fstar/ulib/prims.fst&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ ~/opt/fstar/bin/fstar.exe --cache_checked_modules ~/opt/fstar/ulib/prims.fst
All verification conditions discharged successfully
$ ls ~/opt/fstar/ulib/prims.fst.checked
~/opt/fstar/ulib/prims.fst.checked&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Verifying &lt;code&gt;Example.Valid.fst&lt;/code&gt; now gives a different warning:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ ~/opt/fstar/bin/fstar.exe Example.Valid.fst
~/opt/fstar/ulib/FStar.Pervasives.Native.fst(0,0-0,0): (Warning 241) Unable to load ~/opt/fstar/ulib/FStar.Pervasives.Native.fst.checked since checked file ~/opt/fstar/ulib/FStar.Pervasives.Native.fst.checked does not exist; will recheck ~/opt/fstar/ulib/FStar.Pervasives.Native.fst (suppressing this warning for further modules)
Verified module: Example.Valid
All verification conditions discharged successfully&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Running &lt;code&gt;fstar.exe --cache_checked_modules ~/opt/fstar/ulib/FStar.Pervasives.Native.fst&lt;/code&gt; will resolve this warning. After repeating this a couple of times for different modules, we can typecheck &lt;code&gt;Example.Valid.fst&lt;/code&gt; without any warnings.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ ~/opt/fstar/bin/fstar.exe --cache_checked_modules Example.Valid.fst
~/opt/fstar/ulib/prims.fst(0,0-0,0): (Warning 241) Unable to load ~/opt/fstar/ulib/prims.fst.checked since checked file ~/opt/fstar/ulib/prims.fst.checked does not exist; will recheck ~/opt/fstar/ulib/prims.fst (suppressing this warning for further modules)
Example.Valid.fst(0,0-0,0): (Warning 247) Example.Valid.fst.checked was not written since checked file ~/opt/fstar/ulib/FStar.Pervasives.fst.checked does not exist
Verified module: Example.Valid
All verification conditions discharged successfully&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Unfortunately, I am not aware of any way of creating these &lt;code&gt;*.fst.checked&lt;/code&gt; files without doing it iteratively, either manually or with a script.&lt;/p&gt;

&lt;p&gt;If verification of any of the library files fails due to timeouts, you can decide to cheat and trust them without full verification by using the &lt;code&gt;--admit_smt_queries true&lt;/code&gt; argument. Of course, using this argument to trust library files might make sense, but using it for your own code somewhat defeats the purpose of using F*.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ ~/opt/fstar/bin/fstar.exe --admit_smt_queries true --cache_checked_modules ~/opt/fstar/ulib/FStar.Seq.Base.fst
Verified module: FStar.Seq.Base
All verification conditions discharged successfully&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;automated-method&#34;&gt;Automated method&lt;/h4&gt;

&lt;p&gt;The following Perl script runs the commands from the previous section. Make sure to update the paths to &lt;code&gt;fstar.exe&lt;/code&gt; and &lt;code&gt;ulib&lt;/code&gt; to match your setup.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;use&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;strict&lt;/span&gt;;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;use&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;warnings&lt;/span&gt;;

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;my&lt;/span&gt; &lt;span style=&#34;color:#00688b&#34;&gt;$ulibpath&lt;/span&gt; = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;~/opt/fstar/ulib/&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;my&lt;/span&gt; &lt;span style=&#34;color:#00688b&#34;&gt;$previous_output&lt;/span&gt; = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;my&lt;/span&gt; &lt;span style=&#34;color:#00688b&#34;&gt;$output&lt;/span&gt; = &lt;span style=&#34;color:#cd5555&#34;&gt;`~/opt/fstar/bin/fstar.exe Example.Valid.fst 2&amp;gt;&amp;amp;1`&lt;/span&gt;;

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt;((&lt;span style=&#34;color:#00688b&#34;&gt;$previous_output&lt;/span&gt; &lt;span style=&#34;color:#8b008b&#34;&gt;ne&lt;/span&gt; &lt;span style=&#34;color:#00688b&#34;&gt;$output&lt;/span&gt;) &lt;span style=&#34;color:#8b008b&#34;&gt;and&lt;/span&gt; (&lt;span style=&#34;color:#00688b&#34;&gt;$output&lt;/span&gt; =~&lt;span style=&#34;color:#1c7e71&#34;&gt; /Unable to load ($ulibpath[\w.]+\.fsti?)\.checked since checked file \1\.checked does not exist; will recheck \1 \(suppressing this warning for further modules\)/&lt;/span&gt;)) {
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Verifying $1\n&amp;#34;&lt;/span&gt;;
  &lt;span style=&#34;color:#658b00&#34;&gt;system&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;~/opt/fstar/bin/fstar.exe --cache_checked_modules $1&amp;#34;&lt;/span&gt;);
  &lt;span style=&#34;color:#00688b&#34;&gt;$previous_output&lt;/span&gt; = &lt;span style=&#34;color:#00688b&#34;&gt;$output&lt;/span&gt;;
  &lt;span style=&#34;color:#00688b&#34;&gt;$output&lt;/span&gt; = &lt;span style=&#34;color:#cd5555&#34;&gt;`~/opt/fstar/bin/fstar.exe Example.Valid.fst 2&amp;gt;&amp;amp;1`&lt;/span&gt;;
}

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#00688b&#34;&gt;$output&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;setting-up-emacs-for-f-development&#34;&gt;Setting up Emacs for F* development&lt;/h2&gt;

&lt;p&gt;At the time of writing, Emacs has better support for F* than other editors. In addition to &lt;code&gt;fstar-mode&lt;/code&gt; for Emacs, the &lt;a href=&#34;https://github.com/FStarLang/FStar/wiki/Editor-support-for-F*&#34;&gt;Editor support for F*&lt;/a&gt; page on the F* wiki links an F* extension for Visual Studio Code, as well as discontinued plugins for Vim and Atom.
After installing Emacs (&lt;code&gt;sudo dnf install emacs&lt;/code&gt;), follow the instructions for installing and configuring &lt;a href=&#34;https://github.com/FStarLang/fstar-mode.el&#34;&gt;fstar-mode&lt;/a&gt;.
The short version of the instructions is that you need to add the following to &lt;code&gt;~/.emacs&lt;/code&gt;, restart Emacs, and type &lt;code&gt;M-x package-refresh-contents&lt;/code&gt; and &lt;code&gt;M-x package-install RET fstar-mode RET&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-elisp&#34; data-lang=&#34;elisp&#34;&gt;(&lt;span style=&#34;color:#658b00&#34;&gt;require&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;package&lt;/span&gt;)
(&lt;span style=&#34;color:#00688b&#34;&gt;add-to-list&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;package-archives&lt;/span&gt; &amp;#39;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;melpa&amp;#34;&lt;/span&gt; . &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;http://melpa.org/packages/&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#00688b&#34;&gt;t&lt;/span&gt;)
(&lt;span style=&#34;color:#00688b&#34;&gt;package-initialize&lt;/span&gt;)

(&lt;span style=&#34;color:#658b00&#34;&gt;setq-default&lt;/span&gt; &lt;span style=&#34;color:#00688b&#34;&gt;fstar-executable&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;~/opt/fstar/bin/fstar.exe&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After installing &lt;code&gt;fstar-mode&lt;/code&gt; as above, try opening &lt;code&gt;Example.Valid.fst&lt;/code&gt; or &lt;code&gt;Example.Invalid.fst&lt;/code&gt; and pressing &lt;code&gt;C-c C-n&lt;/code&gt; a few times, to incrementally verify the file. More keyboard shortcuts can be found in the &lt;a href=&#34;https://github.com/FStarLang/fstar-mode.el&#34;&gt;documentation for fstar-mode&lt;/a&gt;, but one which is worth highlighting in &lt;code&gt;C-c C-x&lt;/code&gt; which terminates the F* subprocess; it sometimes gets into a state where it does not accept any code as vaild, or does not find imported modules, and restarting it is the most straightforward way of getting out of that state.&lt;/p&gt;

&lt;h2 id=&#34;setting-up-a-makefile-and-running-some-code&#34;&gt;Setting up a Makefile and running some code&lt;/h2&gt;

&lt;p&gt;To get executable code, we need to perform some additional steps; we will extract F* code to OCaml, and then compile the resulting OCaml code to something we can actually run.
The example we will run is &lt;a href=&#34;./examples/Example.Executable.fst&#34;&gt;the following&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;module&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;Example&lt;/span&gt;.&lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Executable&lt;/span&gt;

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;open&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;FStar&lt;/span&gt;.&lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;IO&lt;/span&gt;

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;let&lt;/span&gt; main = &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;FStar&lt;/span&gt;.&lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;IO&lt;/span&gt;.print_string &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Hello world!&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To build it, we will use the following &lt;a href=&#34;./examples/Makefile&#34;&gt;Makefile&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-makefile&#34; data-lang=&#34;makefile&#34;&gt;&lt;span style=&#34;color:#008b45&#34;&gt;all&lt;/span&gt;: out/ExampleExecutable

&lt;span style=&#34;color:#008b45&#34;&gt;check&lt;/span&gt;: Example.Executable.fst
        ~/opt/fstar/bin/fstar.exe --use_hints --use_hint_hashes --record_hints --cache_checked_modules Example.Executable.fst

&lt;span style=&#34;color:#008b45&#34;&gt;clean&lt;/span&gt;:
        rm -rf codegen/
        rm -rf out/

&lt;span style=&#34;color:#008b45&#34;&gt;codegen&lt;/span&gt;:
        mkdir codegen

&lt;span style=&#34;color:#008b45&#34;&gt;out&lt;/span&gt;:
        mkdir out

&lt;span style=&#34;color:#008b45&#34;&gt;ocaml&lt;/span&gt;: codegen Example.Executable.fst
        ~/opt/fstar/bin/fstar.exe --use_hints --use_hint_hashes --record_hints --cache_checked_modules --odir codegen --codegen OCaml --extract &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;Example.Executable&amp;#39;&lt;/span&gt; Example.Executable.fst

&lt;span style=&#34;color:#008b45&#34;&gt;out/ExampleExecutable&lt;/span&gt;: ocaml out
        &lt;span style=&#34;color:#00688b&#34;&gt;OCAMLPATH&lt;/span&gt;=~/opt/fstar/bin/ opam &lt;span style=&#34;color:#658b00&#34;&gt;exec&lt;/span&gt; -- ocamlfind opt -package fstarlib -linkpkg -g codegen/Example_Executable.ml -o out/ExampleExecutable
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The idea with this Makefile is to have something fairly minimal. For real projects it might be a good idea to include &lt;code&gt;ulib/ml/Makefile.include&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Using the Makefile, we can now build and run our executable.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ make
mkdir codegen
~/opt/fstar/bin/fstar.exe --use_hints --use_hint_hashes --record_hints --cache_checked_modules --odir codegen --codegen OCaml --extract &amp;#39;Example.Executable&amp;#39; Example.Executable.fst
Extracted module Example.Executable
Verified module: Example.Executable
All verification conditions discharged successfully
mkdir out
OCAMLPATH=~/opt/fstar/bin/ opam exec -- ocamlfind opt -package fstarlib -linkpkg -g codegen/Example_Executable.ml -o out/ExampleExecutable
$ ./out/ExampleExecutable
Hello world!&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We have now, starting from a newly installed Linux system, set up an environment for writing, checking, extracting and running F* code.&lt;/p&gt;

&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;

&lt;p&gt;For further reading about F* in general, see the official F* website and the official F* tutorial:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://fstar-lang.org/&#34;&gt;https://fstar-lang.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://fstar-lang.org/tutorial&#34;&gt;https://fstar-lang.org/tutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For details about setting up OCaml:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://dev.realworldocaml.org/install.html&#34;&gt;https://dev.realworldocaml.org/install.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://opam.ocaml.org/doc/Install.html&#34;&gt;https://opam.ocaml.org/doc/Install.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For the latest version of the installation instructuons for F*, including other approaches than building from source:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/FStarLang/FStar/blob/master/INSTALL.md&#34;&gt;https://github.com/FStarLang/FStar/blob/master/INSTALL.md&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
  </channel>
</rss>
